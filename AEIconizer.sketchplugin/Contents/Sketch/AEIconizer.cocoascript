// Sketch Plugin: AEIconizer (ctrl shift i)
// Source: github.com/tadija/AEIconizer

var iTunesSizes = NSArray.arrayWithArray([1024, 512])
var iOSSizes = NSArray.arrayWithArray([83.5, 76, 60, 40, 29, 20])
var watchOSSizes = NSArray.arrayWithArray([98, 86, 27.5, 24])
var otherSizes = NSArray.arrayWithArray([72, 57, 50])
var macOSSizes = NSArray.arrayWithArray([256, 128, 32, 16])
var iconSizes = NSArray.arrayWithArray([iTunesSizes, iOSSizes, watchOSSizes, otherSizes, macOSSizes])

function onRun(context) {
    var doc = context.document
    if (originalIcon = handleSelection(context)) {
        if ([[originalIcon frame] width] == [[originalIcon frame] height]) {
            [originalIcon setName: "Icon-Original"]
            removeExistingIcons(context)
            iconize(originalIcon)
            [[doc currentView] centerLayersInCanvas]
        } else {
            [doc showMessage:"Oops, icon artboard must have same width and height"]
        }
    }
}

function handleSelection(context) {
    var selection = context.selection
    var doc = context.document
    var iconArtboard

    if([selection count] == 0) {
        if ([[[doc currentPage] artboards] count] == 1) {
            iconArtboard = [[[doc currentPage] artboards] firstObject]
        } else {
            [doc showMessage:"Oops, you have to select something"]
        }
    } else {
        var currentSelection = selection[0]
        if (currentSelection.className() == "MSArtboardGroup") {
            iconArtboard = currentSelection
        } else {
            iconArtboard = [currentSelection parentArtboard]
            if (!iconArtboard) {
                [doc showMessage:"Oops, selection has to be inside artboard"]
            }
        }
        currentSelection.isSelected = false
    }

    return iconArtboard
}

function removeExistingIcons(context) {
    var doc = context.document
    var artboards = [[doc currentPage] artboards]
    var loop = [artboards objectEnumerator]
    var artboardNames = iconArtboardNames()

    while (artboard = [loop nextObject]) {
        var name = [artboard name]
        if ([artboardNames containsObject: name]) {
            [[doc currentPage] removeLayer:artboard]
        }
    }
}

function iconArtboardNames() {
    var artboardNames = [NSMutableArray new]
    var allSizes = [iconSizes objectEnumerator]

    while (sizeArray = [allSizes nextObject]) {
        var sizes = [sizeArray objectEnumerator]
        while (newSize = [sizes nextObject]) {
            var iconName = "Icon-" + newSize
            if (newSize == 83.5 || newSize == 27.5) {
                iconName = "Icon-" + newSize + "@2x"
            }
            [artboardNames addObject: iconName]
        }
    }

    return artboardNames
}

function iconize(originalIcon) {
    var originalSize = [[originalIcon frame] width]
    var originalX = [[originalIcon absoluteRect] x]
    var originalY = [[originalIcon absoluteRect] y]

    var spacing = 40
    var startX = originalX
    var startY = originalY + originalSize + spacing

    var allSizes = [iconSizes objectEnumerator]
    while (sizeArray = [allSizes nextObject]) {
        startY = createIconsWithSizes(sizeArray, originalIcon, startX, startY, spacing)
    }
}

function createIconsWithSizes(sizeArray, originalIcon, fromX, fromY, spacing) {
    maxX = 0
    newY = fromY

    var sizes = [sizeArray objectEnumerator]
    while (newSize = [sizes nextObject]) {
        var iconName = ""
        var icon = originalIcon

        if (newSize == 83.5 || newSize == 27.5) {
            iconName = "Icon-" + newSize + "@2x"
            icon = scaleIcon(originalIcon, newSize * 2, iconName)
            [[icon exportOptions] addExportFormat]
        } else {
            iconName = "Icon-" + newSize
            icon = scaleIcon(originalIcon, newSize, iconName)
            var maxExport = 3

            // skip @3x only for macOS app icon
            if (newSize == 256 || newSize == 128 || newSize == 32 || newSize == 16) {
                maxExport = 2
            }

            for (var i=0; i<maxExport; i++) {
                [[icon exportOptions] addExportFormat]
            }
        }

        if (newSize == 1024) {
            [[icon absoluteRect] setX:fromX]
            [[icon absoluteRect] setY:fromY]

            newY = [[icon absoluteRect] y]
        }
        else if (newSize == 512) { 
            [[icon absoluteRect] setX:fromX]
            [[icon absoluteRect] setY:fromY+1024+spacing]

            newY = [[icon absoluteRect] y]
        } 
        else {
            if (maxX == 0) {
               maxX = fromX + 512 + spacing
            }

            [[icon absoluteRect] setX:maxX]
            [[icon absoluteRect] setY:fromY]

            maxX = [[icon absoluteRect] x] + [[icon absoluteRect] width] + spacing

            newMaxY = [[icon absoluteRect] y] + [[icon absoluteRect] height]
            if (newMaxY > newY) {
                newY = newMaxY + spacing
            }
        }

    }

    return newY
}

function scaleIcon(originalIcon, newSize, newName) {
    var newIcon = [originalIcon duplicate]

    var originalSize = [[originalIcon frame] width]
    var ratio = newSize / originalSize
    [newIcon multiplyBy:ratio]

    [newIcon setName: newName]
    [newIcon select:true byExtendingSelection:true]

    return newIcon
}
